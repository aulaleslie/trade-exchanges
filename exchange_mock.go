// Code generated by MockGen. DO NOT EDIT.
// Source: exchange.go

// Package exchanges is a generated GoMock package.
package exchanges

import (
	context "context"
	reflect "reflect"
	time "time"

	apd "github.com/cockroachdb/apd"
	gomock "github.com/golang/mock/gomock"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockExchange) CancelOrder(arg0 context.Context, symbol, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, symbol, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockExchangeMockRecorder) CancelOrder(arg0, symbol, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockExchange)(nil).CancelOrder), arg0, symbol, id)
}

// GenerateClientOrderID mocks base method.
func (m *MockExchange) GenerateClientOrderID(ctx context.Context, identifierID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateClientOrderID", ctx, identifierID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateClientOrderID indicates an expected call of GenerateClientOrderID.
func (mr *MockExchangeMockRecorder) GenerateClientOrderID(ctx, identifierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateClientOrderID", reflect.TypeOf((*MockExchange)(nil).GenerateClientOrderID), ctx, identifierID)
}

// GetAccount mocks base method.
func (m *MockExchange) GetAccount(arg0 context.Context) (Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockExchangeMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockExchange)(nil).GetAccount), arg0)
}

// GetName mocks base method.
func (m *MockExchange) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockExchangeMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockExchange)(nil).GetName))
}

// GetOpenOrders mocks base method.
func (m *MockExchange) GetOpenOrders(arg0 context.Context) ([]OrderDetailInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrders", arg0)
	ret0, _ := ret[0].([]OrderDetailInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrders indicates an expected call of GetOpenOrders.
func (mr *MockExchangeMockRecorder) GetOpenOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrders", reflect.TypeOf((*MockExchange)(nil).GetOpenOrders), arg0)
}

// GetOrderInfo mocks base method.
func (m *MockExchange) GetOrderInfo(arg0 context.Context, symbol, id string, createdAt *time.Time) (OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", arg0, symbol, id, createdAt)
	ret0, _ := ret[0].(OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockExchangeMockRecorder) GetOrderInfo(arg0, symbol, id, createdAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockExchange)(nil).GetOrderInfo), arg0, symbol, id, createdAt)
}

// GetOrderInfoByClientOrderID mocks base method.
func (m *MockExchange) GetOrderInfoByClientOrderID(arg0 context.Context, symbol, clientOrderID string, createdAt *time.Time) (OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfoByClientOrderID", arg0, symbol, clientOrderID, createdAt)
	ret0, _ := ret[0].(OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfoByClientOrderID indicates an expected call of GetOrderInfoByClientOrderID.
func (mr *MockExchangeMockRecorder) GetOrderInfoByClientOrderID(arg0, symbol, clientOrderID, createdAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfoByClientOrderID", reflect.TypeOf((*MockExchange)(nil).GetOrderInfoByClientOrderID), arg0, symbol, clientOrderID, createdAt)
}

// GetOrders mocks base method.
func (m *MockExchange) GetOrders(ctx context.Context, filter OrderFilter) ([]OrderDetailInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, filter)
	ret0, _ := ret[0].([]OrderDetailInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockExchangeMockRecorder) GetOrders(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockExchange)(nil).GetOrders), ctx, filter)
}

// GetPrefix mocks base method.
func (m *MockExchange) GetPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrefix indicates an expected call of GetPrefix.
func (mr *MockExchangeMockRecorder) GetPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrefix", reflect.TypeOf((*MockExchange)(nil).GetPrefix))
}

// GetPrice mocks base method.
func (m *MockExchange) GetPrice(arg0 context.Context, symbol string) (*apd.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", arg0, symbol)
	ret0, _ := ret[0].(*apd.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockExchangeMockRecorder) GetPrice(arg0, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockExchange)(nil).GetPrice), arg0, symbol)
}

// GetTradableSymbols mocks base method.
func (m *MockExchange) GetTradableSymbols(arg0 context.Context) ([]SymbolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradableSymbols", arg0)
	ret0, _ := ret[0].([]SymbolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradableSymbols indicates an expected call of GetTradableSymbols.
func (mr *MockExchangeMockRecorder) GetTradableSymbols(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradableSymbols", reflect.TypeOf((*MockExchange)(nil).GetTradableSymbols), arg0)
}

// PlaceBuyOrder mocks base method.
func (m *MockExchange) PlaceBuyOrder(arg0 context.Context, isRetry bool, symbol string, price, qty *apd.Decimal, clientOrderID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceBuyOrder", arg0, isRetry, symbol, price, qty, clientOrderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceBuyOrder indicates an expected call of PlaceBuyOrder.
func (mr *MockExchangeMockRecorder) PlaceBuyOrder(arg0, isRetry, symbol, price, qty, clientOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceBuyOrder", reflect.TypeOf((*MockExchange)(nil).PlaceBuyOrder), arg0, isRetry, symbol, price, qty, clientOrderID)
}

// PlaceBuyOrderV2 mocks base method.
func (m *MockExchange) PlaceBuyOrderV2(arg0 context.Context, isRetry bool, symbol string, price, qty *apd.Decimal, clientOrderID, orderType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceBuyOrderV2", arg0, isRetry, symbol, price, qty, clientOrderID, orderType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceBuyOrderV2 indicates an expected call of PlaceBuyOrderV2.
func (mr *MockExchangeMockRecorder) PlaceBuyOrderV2(arg0, isRetry, symbol, price, qty, clientOrderID, orderType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceBuyOrderV2", reflect.TypeOf((*MockExchange)(nil).PlaceBuyOrderV2), arg0, isRetry, symbol, price, qty, clientOrderID, orderType)
}

// PlaceSellOrder mocks base method.
func (m *MockExchange) PlaceSellOrder(arg0 context.Context, isRetry bool, symbol string, price, qty *apd.Decimal, clientOrderID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceSellOrder", arg0, isRetry, symbol, price, qty, clientOrderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceSellOrder indicates an expected call of PlaceSellOrder.
func (mr *MockExchangeMockRecorder) PlaceSellOrder(arg0, isRetry, symbol, price, qty, clientOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceSellOrder", reflect.TypeOf((*MockExchange)(nil).PlaceSellOrder), arg0, isRetry, symbol, price, qty, clientOrderID)
}

// PlaceSellOrderV2 mocks base method.
func (m *MockExchange) PlaceSellOrderV2(arg0 context.Context, isRetry bool, symbol string, price, qty *apd.Decimal, clientOrderID, orderType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceSellOrderV2", arg0, isRetry, symbol, price, qty, clientOrderID, orderType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceSellOrderV2 indicates an expected call of PlaceSellOrderV2.
func (mr *MockExchangeMockRecorder) PlaceSellOrderV2(arg0, isRetry, symbol, price, qty, clientOrderID, orderType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceSellOrderV2", reflect.TypeOf((*MockExchange)(nil).PlaceSellOrderV2), arg0, isRetry, symbol, price, qty, clientOrderID, orderType)
}

// ReleaseOrder mocks base method.
func (m *MockExchange) ReleaseOrder(arg0 context.Context, symbol, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseOrder", arg0, symbol, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseOrder indicates an expected call of ReleaseOrder.
func (mr *MockExchangeMockRecorder) ReleaseOrder(arg0, symbol, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseOrder", reflect.TypeOf((*MockExchange)(nil).ReleaseOrder), arg0, symbol, id)
}

// RoundPrice mocks base method.
func (m *MockExchange) RoundPrice(arg0 context.Context, symbol string, price *apd.Decimal, tickSize *string) (*apd.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundPrice", arg0, symbol, price, tickSize)
	ret0, _ := ret[0].(*apd.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundPrice indicates an expected call of RoundPrice.
func (mr *MockExchangeMockRecorder) RoundPrice(arg0, symbol, price, tickSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundPrice", reflect.TypeOf((*MockExchange)(nil).RoundPrice), arg0, symbol, price, tickSize)
}

// RoundQuantity mocks base method.
func (m *MockExchange) RoundQuantity(arg0 context.Context, symbol string, qty *apd.Decimal) (*apd.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundQuantity", arg0, symbol, qty)
	ret0, _ := ret[0].(*apd.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundQuantity indicates an expected call of RoundQuantity.
func (mr *MockExchangeMockRecorder) RoundQuantity(arg0, symbol, qty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundQuantity", reflect.TypeOf((*MockExchange)(nil).RoundQuantity), arg0, symbol, qty)
}

// WatchAccountPositions mocks base method.
func (m *MockExchange) WatchAccountPositions(arg0 context.Context) (<-chan PositionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAccountPositions", arg0)
	ret0, _ := ret[0].(<-chan PositionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAccountPositions indicates an expected call of WatchAccountPositions.
func (mr *MockExchangeMockRecorder) WatchAccountPositions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAccountPositions", reflect.TypeOf((*MockExchange)(nil).WatchAccountPositions), arg0)
}

// WatchOrdersStatuses mocks base method.
func (m *MockExchange) WatchOrdersStatuses(arg0 context.Context) (<-chan OrderEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOrdersStatuses", arg0)
	ret0, _ := ret[0].(<-chan OrderEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOrdersStatuses indicates an expected call of WatchOrdersStatuses.
func (mr *MockExchangeMockRecorder) WatchOrdersStatuses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOrdersStatuses", reflect.TypeOf((*MockExchange)(nil).WatchOrdersStatuses), arg0)
}

// WatchSymbolPrice mocks base method.
func (m *MockExchange) WatchSymbolPrice(arg0 context.Context, symbol string) (<-chan PriceEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSymbolPrice", arg0, symbol)
	ret0, _ := ret[0].(<-chan PriceEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSymbolPrice indicates an expected call of WatchSymbolPrice.
func (mr *MockExchangeMockRecorder) WatchSymbolPrice(arg0, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSymbolPrice", reflect.TypeOf((*MockExchange)(nil).WatchSymbolPrice), arg0, symbol)
}

// MockBulkCancelExchange is a mock of BulkCancelExchange interface.
type MockBulkCancelExchange struct {
	ctrl     *gomock.Controller
	recorder *MockBulkCancelExchangeMockRecorder
}

// MockBulkCancelExchangeMockRecorder is the mock recorder for MockBulkCancelExchange.
type MockBulkCancelExchangeMockRecorder struct {
	mock *MockBulkCancelExchange
}

// NewMockBulkCancelExchange creates a new mock instance.
func NewMockBulkCancelExchange(ctrl *gomock.Controller) *MockBulkCancelExchange {
	mock := &MockBulkCancelExchange{ctrl: ctrl}
	mock.recorder = &MockBulkCancelExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkCancelExchange) EXPECT() *MockBulkCancelExchangeMockRecorder {
	return m.recorder
}

// BulkCancelOrder mocks base method.
func (m *MockBulkCancelExchange) BulkCancelOrder(symbol string, ids []string) ([]BulkCancelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCancelOrder", symbol, ids)
	ret0, _ := ret[0].([]BulkCancelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCancelOrder indicates an expected call of BulkCancelOrder.
func (mr *MockBulkCancelExchangeMockRecorder) BulkCancelOrder(symbol, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCancelOrder", reflect.TypeOf((*MockBulkCancelExchange)(nil).BulkCancelOrder), symbol, ids)
}
